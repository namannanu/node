{
	"info": {
		"_postman_id": "amplify-upload-api-collection",
		"name": "Amplify Upload API - Complete Testing",
		"description": "Complete collection for testing AWS S3 upload API with JWT authentication, enhanced validation, one-image-per-user enforcement, fullname sanitization, secure signed URLs, and comprehensive error handling. Features: Upload, Delete, Signed URL generation, Admin controls. Ready for Aadhar API integration.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "amplify-api-tester"
	},
	"item": [
		{
			"name": "1. Generate JWT Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test successful token generation",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('token');",
							"    pm.expect(jsonData).to.have.property('success', true);",
							"    ",
							"    // Save token for other requests",
							"    pm.collectionVariables.set('jwt_token', jsonData.token);",
							"    pm.collectionVariables.set('user_id', jsonData.user.userId);",
							"});",
							"",
							"pm.test(\"Token expires in 24h\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.expiresIn).to.eql('24h');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"{{test_user_id}}\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/generate-token",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"generate-token"
					]
				},
				"description": "Generate JWT token for authentication. Required for all upload operations."
			},
			"response": []
		},
		{
			"name": "2. Upload User Photo to S3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains expected properties\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success', true);",
							"    pm.expect(jsonData).to.have.property('imageUrl').that.is.a('string');",
							"    pm.expect(jsonData).to.have.property('message', 'Image uploaded successfully');",
							"    ",
							"    // Store the image URL for subsequent requests",
							"    if (jsonData.imageUrl) {",
							"        pm.collectionVariables.set('uploaded_image_url', jsonData.imageUrl);",
							"        console.log(\"✅ Image URL saved: \" + jsonData.imageUrl);",
							"    }",
							"",
							"    if (jsonData.key) {",
							"        pm.collectionVariables.set('image_key', jsonData.key);",
							"        console.log(\"✅ Image key saved: \" + jsonData.key);",
							"    }",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/Users/testuser/Desktop/test_face.jpg"
						},
						{
							"key": "userId",
							"value": "{{user_id}}",
							"type": "text"
						},
						{
							"key": "fullname",
							"value": "Test User Name",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/upload-image",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"upload-image"
					]
				},
				"description": "Upload an image to AWS S3 with secure JWT authentication. The API accepts a user image, validates it, and uploads it with proper naming conventions."
			},
			"response": []
		},
		{
			"name": "3. Get Uploaded Image Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains uploaded image information\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success', true);",
							"    pm.expect(jsonData).to.have.property('hasUploadedImage');",
							"    pm.expect(jsonData).to.have.property('message');",
							"    ",
							"    // If there's an image, check its details",
							"    if (jsonData.hasUploadedImage) {",
							"        pm.expect(jsonData).to.have.property('imageUrl').that.is.a('string');",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/get-image-status/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"get-image-status",
						"{{user_id}}"
					]
				},
				"description": "Check if a user has already uploaded an image. Returns image URL if available."
			},
			"response": []
		},
		{
			"name": "4. Generate Signed URL for Download",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains signed URL\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success', true);",
							"    pm.expect(jsonData).to.have.property('url').that.is.a('string');",
							"    pm.expect(jsonData).to.have.property('message', 'Signed URL generated successfully');",
							"    ",
							"    // Store the signed URL for subsequent requests",
							"    if (jsonData.url) {",
							"        pm.collectionVariables.set('signed_url', jsonData.url);",
							"        console.log(\"✅ Signed URL saved: \" + jsonData.url);",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/generate-signed-url/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"generate-signed-url",
						"{{user_id}}"
					]
				},
				"description": "Generate a signed URL for securely accessing a user's uploaded image. The URL is time-limited for security."
			},
			"response": []
		},
		{
			"name": "5. Access Image via Signed URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Image is accessible\", function() {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    // Check if response is an image",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('image');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{signed_url}}",
					"host": [
						"{{signed_url}}"
					]
				},
				"description": "Verify that the generated signed URL provides access to the image. This tests the complete AWS S3 configuration."
			},
			"response": []
		},
		{
			"name": "6. Delete User Image",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response indicates successful deletion\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success', true);",
							"    pm.expect(jsonData).to.have.property('message').that.includes('deleted');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/delete-image/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"delete-image",
						"{{user_id}}"
					]
				},
				"description": "Delete a user's uploaded image from AWS S3 and update the user's record to reflect this change."
			},
			"response": []
		},
		{
			"name": "7. Verify Image Deletion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"User has no uploaded image\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success', true);",
							"    pm.expect(jsonData).to.have.property('hasUploadedImage', false);",
							"    pm.expect(jsonData).to.not.have.property('imageUrl');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/get-image-status/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"get-image-status",
						"{{user_id}}"
					]
				},
				"description": "Confirm that the image was successfully deleted and the user's record has been updated."
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000"
		},
		{
			"key": "test_user_id",
			"value": "test123"
		},
		{
			"key": "jwt_token",
			"value": ""
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "uploaded_image_url",
			"value": ""
		},
		{
			"key": "image_key",
			"value": ""
		},
		{
			"key": "signed_url",
			"value": ""
		}
	]
}
